
- name: Create a list to store the manifest for each component that will be installed
  set_fact:
    component_manifests: []

- name: Retrieve 3Scale admin auth token
  include_role:
    name: 3scale
    tasks_from: admin_token
  when: threescale

- name: Retrieve 3Scale master auth token
  shell:  oc describe dc/system-app -n 3scale | grep MASTER_ACCESS_TOKEN | head -1 | awk -F '"' '{print $2}'
  register: master_auth_config
  when: threescale

- name: Get threescale admin  route
  shell: oc get route/system-master -o template --template \{\{.spec.host\}\} -n {{ threescale_namespace }}
  register: threescale_system_admin_route
  when: threescale
- set_fact:
    threescale_system_admin_route: "{{threescale_system_admin_route.stdout}}"
  when: threescale

- name: Get 3scale dashboard url
  shell: oc get route/system-provider-admin -o jsonpath='{.spec.host}' -n {{ threescale_namespace }}
  register: threescale_host_cmd
  when: threescale
- set_fact:
    threescale_dashboard_url: "https://{{ threescale_host_cmd.stdout}}"
  when: threescale

- name: set threescale component
  set_fact:
    threescale_manifest:
    - name: 3scale
      version: "{{threescale_version}}"
      host: "{{threescale_dashboard_url}}"
  when: threescale


- set_fact:
    component_manifests: "{{component_manifests}} + {{threescale_manifest}}"
  when: threescale

- set_fact:
    threescale_master_token: "{{master_auth_config.stdout}}"
  when: threescale

- name: Get apicurito ui secure route
  shell: oc get route/apicurito -o template --template \{\{.spec.host\}\} -n {{ eval_apicurito_namespace }}
  register: apicurito_ui_route
  when: apicurito

- set_fact:
    apicurito_secure_ui_route: "https://{{apicurito_ui_route.stdout}}"
  when: apicurito

- name: set apicurito component
  set_fact:
    apicurito_manifest:
    - name: apicurito
      version: "{{apicurito_version}}"
      host: "{{apicurito_secure_ui_route}}"
  when: apicurito

- set_fact:
    component_manifests: "{{component_manifests}} + {{apicurito_manifest}}"
  when: apicurito

- name: Get codeready secure route
  shell: oc get route/codeready -o template --template \{\{.spec.host\}\} -n {{ che_namespace }}
  register: che_secure_route
  when: che and launcher

- set_fact:
    che_secure_route: "https://{{che_secure_route.stdout}}"
  when: che and launcher

- name: set che component
  set_fact:
    che_manifest:
    - name: codeready
      version: "{{che_version}}"
      host: "{{che_secure_route}}"
  when: che and launcher

- set_fact:
    component_manifests: "{{component_manifests}} + {{che_manifest}}"
  when: che and launcher

- name: Find encrypted RH-SSO route
  shell: for route in $(oc get routes -n {{ rhsso_namespace}} | awk '{print $1}' | grep -v 'NAME'); do term=$(oc get route $route -n {{ rhsso_namespace }} -o template --template \{\{.spec.tls.termination\}\}); if [ "$term" == "edge" ] || [ "$term" == "reencrypt" ]; then echo $route; break; fi; done
  register: rhsso_secure_route_name
  failed_when: rhsso_secure_route_name.stdout == ''

- name: Get RH-SSO secure route
  local_action: command oc get route/{{ rhsso_secure_route_name.stdout }} -o template --template \{\{.spec.host\}\} -n {{ rhsso_namespace }}
  register: rhsso_secure_route

- set_fact:
    rhsso_secure_route: "https://{{rhsso_secure_route.stdout}}"

- name: set rhsso component
  set_fact:
    rhsso_manifest:
    - name: rh-sso
      version: "{{rhsso_version}}"
      host: "{{rhsso_secure_route}}"

- set_fact:
    component_manifests: "{{component_manifests}} + {{rhsso_manifest}}"

- name: Get Gitea route
  shell: oc get routes -n {{ gitea_namespace }} -o=jsonpath={.items[0].spec.host}
  register: gitea_route
  when: gitea

- set_fact:
    gitea_route: "https://{{gitea_route.stdout}}"
  when: gitea

- name: set gitea component
  set_fact:
    gitea_manifest:
    - name: gitea
      version: "{{gitea_version}}"
      host: "{{gitea_route}}"
  when: gitea

- set_fact:
    component_manifests: "{{component_manifests}} + {{gitea_manifest}}"
  when: gitea

- name: Get Integreatly WebApp route
  shell: oc get route/tutorial-web-app -o template --template \{\{.spec.host\}\} -n {{ webapp_namespace }}
  register: webapp_route
  when: webapp

- set_fact:
    webapp_route: "https://{{webapp_route.stdout}}"
  when: webapp

- name: Get launcher  route
  shell: oc get route/launcher -o template --template \{\{.spec.host\}\} -n {{ launcher_namespace }}
  register: launcher_route_cmd
  when: launcher

- set_fact:
    launcher_route: "https://{{launcher_route_cmd.stdout}}"
  when: launcher

- name: set launcher component
  set_fact:
    launcher_manifest:
    - name: launcher
      version: "{{launcher_version}}"
      host: "{{launcher_route}}"
  when: launcher

- set_fact:
    component_manifests: "{{component_manifests}} + {{launcher_manifest}}"
  when: launcher

- name: Get Fuse rest route
  shell: oc get route/syndesis -o jsonpath='{.spec.host}' -n {{ eval_managed_fuse_namespace }}
  register: fuse_route_cmd
  when: fuse_online

- set_fact:
    fuse_route: "https://{{fuse_route_cmd.stdout}}"
  when: fuse_online

- name: set fuse online component
  set_fact:
    fuse_online_manifest:
    - name: fuse_online
      version: "{{fuse_version}}"
      host: "{{fuse_route}}"
  when: fuse_online

- set_fact:
    component_manifests: "{{component_manifests}} + {{fuse_online_manifest}}"
  when: fuse_online

- name: set fuse component
  set_fact:
    fuse_on_openshift_manifest:
    - name: fuse_openshift
      version: "{{fuse_version}}"
      host: ""
  when: fuse

- set_fact:
    component_manifests: "{{component_manifests}} + {{fuse_on_openshift_manifest}}"
  when: fuse



- name: Get enmasse rest route
  shell: oc get route/restapi -o template --template \{\{.spec.host\}\} -n {{ enmasse_namespace | default('enmasse') }}
  register: enmsase_route_cmd
  when: enmasse

- set_fact:
    enmasse_rest_route: "https://{{enmsase_route_cmd.stdout}}"
  when: enmasse

- name: set enmasse component
  set_fact:
    enmasse_manifest:
    - name: enmasse
      version: "{{enmasse_version}}"
      host: "{{enmasse_rest_route}}"
  when: enmasse

- set_fact:
    component_manifests: "{{component_manifests}} + {{enmasse_manifest}}"
  when: enmasse

- name: Retrieve launcher sso hostvars
  shell: "oc get route/{{launcher_sso_prefix}} -o jsonpath='{.spec.host}' -n {{ launcher_namespace }}"
  register: launcher_sso_host_cmd
  when: launcher

- set_fact:
    launcher_sso_route: "https://{{launcher_sso_host_cmd.stdout}}"
  when: launcher

- name: Generate custom inventory
  template:
    src: "inventory.j2"
    dest: /tmp/generated_inventory

- name: The manifests of the installed components
  debug:
    msg: "{{component_manifests}}"

- name: Generate custom manifest
  template:
    src: "manifest.j2"
    dest: /tmp/generated_manifest

- name: Check if webapp namespace exists
  shell: oc get namespace {{ webapp_namespace }}
  failed_when: false
  register: webapp_check_namespace_exists_cmd

- name: Create webapp namespace
  shell: oc new-project {{ webapp_namespace }}
  when: webapp_check_namespace_exists_cmd.rc != 0

- name: Add labels to namespace
  shell: oc patch ns {{ webapp_namespace }} --patch '{"metadata":{"labels":{"{{ monitoring_label_name }}":"{{ monitoring_label_value }}", "integreatly-middleware-service":"true"}}}'
  register: namespace_patch
  failed_when: namespace_patch.stderr != '' and 'not patched' not in namespace_patch.stderr
  changed_when: namespace_patch.rc == 0

- name: Check if manifest secret exists
  shell: oc get secret manifest -n {{webapp_namespace}}
  register: manifest_secret
  failed_when: manifest_secret.stderr != '' and 'NotFound' not in manifest_secret.stderr

- name: Delete secret if it exists
  shell: oc delete secret manifest -n {{webapp_namespace}}
  when:   manifest_secret.stderr == ""

- name: Create manifest secret
  shell: oc create secret generic manifest --from-file=/tmp/generated_manifest --type=application/json -n {{webapp_namespace}}

- name: Check if inventory secret exists
  shell: oc get secret inventory -n {{webapp_namespace}}
  register: inventory_secret
  failed_when: inventory_secret.stderr != '' and 'NotFound' not in inventory_secret.stderr

- name: Delete inventory secret if it exists
  shell: oc delete secret inventory -n {{webapp_namespace}}
  when:  inventory_secret.stderr == ""

- name: Create secret with custom inventory
  shell: oc create secret generic inventory --from-file=/tmp/generated_inventory --type=ansible/inventory -n {{webapp_namespace}}

- name: remove generated template
  file: path='/tmp/generated_inventory' state=absent

- name: remove generated template
  file: path='/tmp/generated_manifest' state=absent

- debug:  
    var: che_keycloak_route
    var: che_keycloak_realm
    var: che
    var: launcher

- name: Get SSO token
  uri:
    url: "{{ che_keycloak_route }}/auth/realms/{{ che_keycloak_realm }}/protocol/openid-connect/token"
    method: POST
    body_format: form-urlencoded
    body:
      username: "{{ che_keycloak_user }}"
      password: "{{ che_keycloak_password }}"
      grant_type: password
      client_id: "{{ che_keycloak_client_id }}"
    validate_certs: no
  register: token_text

- set_fact:
    TKN: "{{token_text.json.access_token }}"

- debug: var=TKN

- name: Check if Che IDE is deployed
  uri: 
    url: "{{che_route}}/api/stack"
    validate_certs: false
    method: GET
    headers:
      Authorization: "Bearer {{ TKN }}"
  retries: 100
  delay:   20
  register: response
  until: response.status == 200
  changed_when: false

- name: Update custom stack to Che
  tags: install_custom_stack
  uri: 
    url: "{{che_route}}/api/stack"
    validate_certs: false
    method: POST
    return_content: yes
    headers:
      Authorization: "Bearer {{ TKN }}"
    body: |
        {
          "name": "Learning to use the Camel Rest DSL",
          "description": "Summit Lab with Camel, 3Scale, and OCP",
          "scope": "general",
          "workspaceConfig": {
            "environments": {
              "default": {
                "recipe": {
                  "type": "dockerimage",
                  "content": "weimeilin/che-centos-jdk8"
                },
                "machines": {
                  "dev-machine": {
                    "env": {
                      "MAVEN_OPTS" : "-Xmx512m"
                    },
                    "servers": {
                      "8080/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8080"
                      },
                      "8000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "8000"
                      },
                      "9000/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9000"
                      },
                      "9001/tcp": {
                        "attributes": {},
                        "protocol": "http",
                        "port": "9001"
                      }
                    },
                    "volumes": {},
                    "installers": [
                      "org.eclipse.che.exec",
                      "org.eclipse.che.terminal",
                      "org.eclipse.che.ws-agent",
                      "org.eclipse.che.ls.camel"
                    ],
                    "attributes": {
                      "memoryLimitBytes": "2147483648"
                    }
                  }
                }
              }
            },
            "commands": [
              {
                "commandLine": "mvn install -f ${current.project.path}",
                "name": "Build project",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn spring-boot:run -f ${current.project.path}",
                "name": "run spring-boot",
                "type": "mvn",
                "attributes": {
                  "goal": "Run",
                  "previewUrl": "${server.9000/tcp}"
                }
              },
              {
                "commandLine": "mvn camel-restdsl-swagger:generate -f ${current.project.path}",
                "name": "Generate REST DSL from Swagger",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "mvn generate-sources -f ${current.project.path}",
                "name": "run generate-sources",
                "type": "mvn",
                "attributes": {
                  "goal": "Build",
                  "previewUrl": ""
                }
              },
              {
                "commandLine": "cd ${explorer.current.file.path} && mvn fabric8:deploy",
                "name": "fabric8:deploy",
                "type": "mvn",
                "attributes": {
                  "goal": "Deploy",
                  "previewUrl": ""
                }
              }
            ],
            "projects": [],
            "defaultEnv": "default",
            "name": "default",
            "links": []
          },
          "components": [
            {
              "version": "---",
              "name": "CentOS"
            },
            {
              "version": "1.8.0_45",
              "name": "JDK"
            },
            {
              "version": "3.2.2",
              "name": "Maven"
            },
            {
              "version": "3.10",
              "name": "OpenShift CLI"
            }
          ],
          "creator": "ide",
          "tags": [
            "Java",
            "JDK",
            "Maven",
            "CentOS",
            "Git"
          ],
          "id": "java-oc-day-in-life"
        }
    body_format: json
    status_code: [201, 409]
  register: create_stack

- name: Give stack view/read permissions to all other users
  uri:
    url: "{{che_route}}/api/permissions"
    validate_certs: false
    method: POST
    return_content: yes
    headers:
      Authorization: "Bearer {{ TKN }}"
    status_code: 204
    body_format: json
    body: |
      {
        "userId": "*",
        "domainId": "stack",
        "instanceId": "{{ create_stack.json.id }}",
        "actions": [
          "read",
          "search"
        ]
      }
  when: create_stack.status == 201
